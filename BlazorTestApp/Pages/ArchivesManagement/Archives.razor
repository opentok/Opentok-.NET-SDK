@page "/archives"
@using BlazorTestApp.Data
@using OpenTokSDK
@using System.Globalization
@inject IVideoService Service
@inject NavigationManager NavigationManager
@inject IJSRuntime JavascriptRuntime
<PageTitle>Archives</PageTitle>

<div class="container bump-me">

    <div class="body-content">

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Past Archives</h3>
            </div>
            <div class="panel-body">
                @if (archiveCount >= 0)
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Name</th>
                            <th>Created</th>
                            <th>Duration</th>
                            <th>Status</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var archive in archives)
                        {
                            <tr data-item-id="@archive.Id">
                                <td>@archive.Name</td>
                                <td>@GetMinimumDate().AddMilliseconds(archive.CreatedAt).ToString(CultureInfo.InvariantCulture)</td>
                                <td>@archive.Duration seconds</td>
                                <td>@archive.Status</td>
                                <td>
                                    @if (archive.Status == ArchiveStatus.EXPIRED)
                                    {
                                        @:Expired
                                    }

                                    @if (archive.Status == ArchiveStatus.AVAILABLE)
                                    {
                                        <button class="btn btn-primary" onclick="@(async () => await OpenArchiveAsync(archive.Id))">Open</button>
                                        <button class="btn btn-danger" onclick="@(async () => await DeleteArchiveAsync(archive.Id))">Delete</button>
                                    }
                                </td>
                            </tr>
                        }

                        </tbody>
                    </table>
                }
                else
                {
                    <p>Loading archives...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {

    private IEnumerable<Archive> archives = new List<Archive>();
    private int archiveCount = -1;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var openTokArchives = await Service.ListArchivesAsync();
        var filteredArchives = openTokArchives.Where(archive => archive.Status != ArchiveStatus.EXPIRED).ToList();
        archiveCount = filteredArchives.Count;
        archives = filteredArchives;
    }

    private async Task OpenArchiveAsync(Guid archiveId)
    {
        var archive = await Service.GetArchiveAsync(archiveId);
        await JavascriptRuntime.InvokeVoidAsync("open", archive.Url, "_blank");
    }

    private async Task DeleteArchiveAsync(Guid archiveId)
    {
        await Service.DeleteArchiveAsync(archiveId);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private static DateTime GetMinimumDate() => new(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
}