@page "/stream"
@using BlazorTestApp.Data
@using OpenTokSDK
@using OpenTokSDK.Render
@using LanguageExt
@inject IJSRuntime JavascriptRuntime
@inject IVideoService VideoService
<PageTitle>Publish your stream</PageTitle>

<div class="container">

    <div class="panel-body">
        <h3 class="panel-title">Your stream</h3>
        <p>This part only contains your stream.</p>
        <p>Click <strong>Start stream</strong> to publish your stream to the session. Your stream includes both audio and video.</p>
        <p>Click <strong>Stop stream</strong> to stop publishing your stream.</p>
        <p>
            <button class="btn btn-primary" onclick="@StartStreamAsync" disabled="@isStreaming">Start stream</button>
            <button class="btn btn-secondary" onclick="@StopStreamAsync" disabled="@(!isStreaming)">Stop stream</button>
        </p>
        <div id="publisher"></div>
    </div>
    <hr>
    <div class="panel-body">
        <h3 class="panel-title">Other streams</h3>
        <p>This part contains all other streams from your session, meaning people and experience composer.</p>
        <div id="subscribers">
        </div>
    </div>
    <hr hidden="@(!isStreamAdmin || !isStreaming)">
    <div class="panel-body" hidden="@(!isStreamAdmin || !isStreaming)">
        <div class="panel-heading">
            <h3 class="panel-title">Experience Composer</h3>
        </div>
        <p>
            <textarea type="text" @bind="@experienceComposerUrl" class="textarea-session"></textarea>
        </p>
        <p>
            <button type="button" class="btn btn-success" onclick="@CaptureFeedAsync">Capture feed</button>
            <button type="button" class="btn btn-danger" onclick="@DisposeFeedAsync">Stop feed</button>
        </p>
    </div>
    <hr hidden="@(!isStreamAdmin || !isStreaming)">
    <div class="panel-body" hidden="@(!isStreamAdmin || !isStreaming)">
        <div class="panel-heading">
            <h3 class="panel-title">Instructions</h3>
        </div>
        <div class="panel-body">
            <p>
                Click <strong>Start archiving</strong> to begin archiving this session.
                All publishers in the session will be included, and all publishers that
                join the session will be included as well.
            </p>
            <p>
                Click <strong>Stop archiving</strong> to end archiving this session.
                You can then go to <a href="/archives">past archives</a> to
                view your archive (once its status changes to available).
            </p>
            <p>
                <button class="btn btn-success" onclick="@StartArchivingAsync" disabled="@isArchiving">Start archiving</button>
                <button class="btn btn-danger" onclick="@StopArchivingAsync" disabled="@(!isArchiving)">Stop archiving</button>
            </p>
            <table class="table">
                <thead>
                <tr>
                    <th>When</th>
                    <th>You will see</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td style="vertical-align: middle;">Archiving is started</td>
                    <td>
                        <img src="/Content/img/archiving-on-message.png">
                    </td>
                </tr>
                <tr>
                    <td style="vertical-align: middle;">Archiving remains on</td>
                    <td>
                        <img src="/Content/img/archiving-on-idle.png">
                    </td>
                </tr>
                <tr>
                    <td style="vertical-align: middle;">Archiving is stopped</td>
                    <td>
                        <img src="/Content/img/archiving-off.png">
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    private Option<Archive> currentArchive = Option<Archive>.None;
    private bool isArchiving;
    private bool isStreamAdmin;
    private string experienceComposerUrl = "https://miro.com/app/board/uXjVOozTgCo=/?share_link_id=196081073888";
    private bool isStreaming;
    private Option<RenderItem> currentRendering = Option<RenderItem>.None;
    private readonly List<RenderItem> renderingItems = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        isStreamAdmin = IsStreamAdmin();
    }

    private bool IsStreamAdmin() => VideoService
        .GetCredentials()
        .Map(credentials => credentials.IsNewSession)
        .Match(isNew => !isNew, () => false);

    private async Task StartStreamAsync() => await VideoService
        .GetSessionInformation()
        .Do(_ => NotifyStreamingStarted())
        .IfSomeAsync(InitializeStreamAsync);

    private async Task InitializeStreamAsync(SessionInformation session) => await JavascriptRuntime.InvokeVoidAsync(
        "initializeStream", session.ApiKey, session.Credentials.SessionId, session.Credentials.Token);

    private async Task StopStreamAsync()
    {
        NotifyStreamingStopped();
        await DisposeStreamAsync();
    }

    private async Task DisposeStreamAsync() => await JavascriptRuntime.InvokeVoidAsync("disposeStream");

    private async Task StartArchivingAsync() => await VideoService
        .GetCredentials()
        .Do(_ => NotifyArchivingStarted())
        .Map(credentials => credentials.SessionId)
        .MapAsync(StartArchiveAsync)
        .IfSome(AssignArchive);

    private Task<Archive> StartArchiveAsync(string sessionId) => VideoService.StartArchiveAsync(sessionId);

    private void AssignArchive(Archive archive) => currentArchive = archive;

    private void NotifyArchivingStarted() => isArchiving = true;

    private async Task StopArchivingAsync() => await currentArchive
        .Do(_ => NotifyArchivingStopped())
        .Map(archive => archive.Id)
        .IfSomeAsync(StopArchiveAsync);

    private async Task StopArchiveAsync(Guid id) => await VideoService.StopArchiveAsync(id);

    private void NotifyArchivingStopped() => isArchiving = false;

    private void NotifyStreamingStarted() => isStreaming = true;

    private void NotifyStreamingStopped() => isStreaming = false;

    private async Task CaptureFeedAsync()
    {
        var rendering = await VideoService.StartExperienceComposerAsync(experienceComposerUrl, "Name");
        rendering.IfSome(value => renderingItems.Add(value));
    }

    private async Task DisposeFeedAsync()
    {
        var tasks = renderingItems.Select(item => VideoService.StopExperienceComposerAsync(item));
        await Task.WhenAll(tasks);
    }

}